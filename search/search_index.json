{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AvantiPoint Packages is the evolution of the work done to port the BaGet project to .NET 5 and the special needs encountered when setting up Sponsor Connect. Over time it became clear that we really needed an In-House and Customer facing feed in addition to Sponsor Connect. Rather than reinvent the wheel this was broken off into something that was decoupled, and easy to reuse. While AvantiPoint Packages is based on the BaGet project a lot of effort has gone into specializing the package feed for real world line of business applications. This could easily be used by industry partners like Infragistics, Telerik and Syncfusion, or it could be equally useful for your in-house development team. So what exactly were the problems that AvantiPoint Packages solves that you don't get in BaGet? Authentication. While many package feeds such as NuGet.org can operate just fine in the open for anyone to freely browse and download packages, many times it is important to secure the package feed so that only customers or internal developers can access your intellectual property. Authorization. Authentication may tell you that you know who the user is but it doesn't mean that the user should have access to do something. There are two ways that we provide hooks for Authorization. We understand that users of a Package feed have 2 roles. That of a Package Consumer, and that of a Package Publisher We understand that while a user may have package consumer rights they may not have rights to consumer all packages. For instance let's say you were a control vendor. The user may be a customer with a valid license, however that license may only be good for Xamarin and thus they should not have access to a package for WPF development. Lifecycle event hooks. Packages / Symbols are uploaded and downloaded. Sometimes it's nice to be able to hook into these events. Perhaps you want to confirm the package was published or that their account accessed the feed from a previously unrecognized IP address. Upstream Package Feeds. While BaGet does actually have some limited support for enabling upstream package feeds, this is limited to a single unauthenticated feed. AvantiPoint Packages provides you a way to register as many upstream sources as you would like, any or all of which can be authenticated or unauthenticated.","title":"Intro"},{"location":"database/","text":"By default AvantiPoint packages ships 3 basic providers. For the most part the configuration can be implemented the same as with BaGet, however there are some additional helpers to help you more easily configure your database provider. While you do need to specify the Database provider type you can optionally pass as ConnectionString name to simplify configuration by only providing connection strings in the ConnectionStrings section of Azure App Services. MySql and MariaDb \u00b6 When using MySql or MariaDb, note that you must provide a Database Server Version to properly configure the connection, and you must specify whether you are using MySql or MariaDb.","title":"Database"},{"location":"database/#mysql-and-mariadb","text":"When using MySql or MariaDb, note that you must provide a Database Server Version to properly configure the connection, and you must specify whether you are using MySql or MariaDb.","title":"MySql and MariaDb"},{"location":"mirrors/","text":"You can configure your package feed to consume one or more upstream sources. You may do this manually when registering your package api. public void ConfigureServices ( IServiceCollection services ) { services . AddNuGetPackagApi ( app => { app . AddUpstreamSource ( \"NuGet.org\" , \"https://api.nuget.org/v3/index.json\" ) . AddUpstreamSource ( \"Telerik\" , \"https://nuget.telerik.com/nuget\" , \"user@domain.com\" , \"your-password\" ); }); } You may register your upstream sources automatically by adding them to your configuration as follows: { \"mirror\" : { \"NuGet.org\" : { \"FeedUrl\" : \"https://api.nuget.org/v3/index.json\" }, \"Telerik\" : { \"FeedUrl\" : \"https://nuget.telerik.com/nuget\" , \"Username\" : \"user@domain.com\" , \"ApiToken\" : \"your-password\" } } } Note If you manually register a source any sources configured as shown will not automatically be registered.","title":"Upstream Mirrors"},{"location":"registration/","text":"When setting up a package feed you must call the AddNuGetPackageApi extension in your ConfigureServices. This will register the base services. You can then configure any additional or optional services you would like including the Database provider or FileStorage type using the builder. public void ConfigureServices ( IServiceCollection services ) { services . AddNuGetPackageApi ( app => { }); } The configuration options will pull the Host Environment Name from the registered IHostEnvironment instance. This allows you to additionally provide specific configurations based on Environment. For instance you can use Sqlite while testing in a Development Environment and SqlServer when in a non-Development environment.","title":"Registration"},{"location":"shields/","text":"We commonly many Open Source projects using Shields to provide users an \"At a Glance\" idea of what the latest package versions are available. This is of course really easy to deal with when our packages are on NuGet.org as we can simply use shields.io to provide us what we need. With a self hosted package feed however it's not as easy. The AvantiPoint Packages feed now includes Shields out of the box in version 3. In order to enable the Shields endpoints simply update your configuration with a Server Name: { \"Shields\" : { \"ServerName\" : \"AP Packages\" } } Note If the Shields ServerName is null or empty the Shields endpoint will not be enabled, and will return a 404.","title":"Shields"},{"location":"storage/","text":"The normal file storage provider is FileStorage. This will save packages and symbols within the default App_Data directory by default. You can optionally specify a local path or network file share when running this On-Prem. Azure Storage \u00b6 When running this in Azure Storage you may want to use Azure Storage to decouple the packages stored from your server. To do this be sure to add the AvantiPoint.Packages.Azure package and register the Azure Storage provider. { \"Storage\" : { \"Type\" : \"AzureBlobStorage\" , \"Container\" : \"my-nuget-feed\" , \"ConnectionString\" : \"your connection string\" , // Required i f you do n o t provide t he Co nne c t io n S tr i n g \"AccountName\" : \"my-storage-account-name\" , \"AccessKey\" : \"your access key\" } } Note The container name should be the name of the Container that you have created in Azure Storage. It will create a packages and symbols sub-directory. The AzureBlobStorage provider can be configured by either providing a ConnectionString or Account Name and Access Key. AWS S3 Bucket \u00b6 You may optionally run this using AWS with an S3 Bucket for file storage. This provides a few authentication paths that you can use based on how you run your application and have setup Authentication. It's recommended that you are familiar with the Aws SDK and look at the AwsApplicationExtensions when setting this up as there are a few logical paths for creating the AmazonS3Client. { \"Type\" : \"AwsS3\" , \"Region\" : \"region name\" , \"Bucket\" : \"bucket name\" , \"Prefix\" : \"prefix\" , \"AssumeRoleArn\" : \"\" , \"UseInstanceProfile\" : false , \"SecretKey\" : \"\" }","title":"File Storage"},{"location":"storage/#azure-storage","text":"When running this in Azure Storage you may want to use Azure Storage to decouple the packages stored from your server. To do this be sure to add the AvantiPoint.Packages.Azure package and register the Azure Storage provider. { \"Storage\" : { \"Type\" : \"AzureBlobStorage\" , \"Container\" : \"my-nuget-feed\" , \"ConnectionString\" : \"your connection string\" , // Required i f you do n o t provide t he Co nne c t io n S tr i n g \"AccountName\" : \"my-storage-account-name\" , \"AccessKey\" : \"your access key\" } } Note The container name should be the name of the Container that you have created in Azure Storage. It will create a packages and symbols sub-directory. The AzureBlobStorage provider can be configured by either providing a ConnectionString or Account Name and Access Key.","title":"Azure Storage"},{"location":"storage/#aws-s3-bucket","text":"You may optionally run this using AWS with an S3 Bucket for file storage. This provides a few authentication paths that you can use based on how you run your application and have setup Authentication. It's recommended that you are familiar with the Aws SDK and look at the AwsApplicationExtensions when setting this up as there are a few logical paths for creating the AmazonS3Client. { \"Type\" : \"AwsS3\" , \"Region\" : \"region name\" , \"Bucket\" : \"bucket name\" , \"Prefix\" : \"prefix\" , \"AssumeRoleArn\" : \"\" , \"UseInstanceProfile\" : false , \"SecretKey\" : \"\" }","title":"AWS S3 Bucket"},{"location":"templates/","text":"To make it even easier to get started you can use our full Package Feed template. The template is a full secured feed out of the box that integrates with your Azure Active Directory domain and uses Send Grid to send email notifications. dotnet new - -install AvantiPoint . Packages . Templates :: 1 . 0 . 19 This pre-built solution will provide a full package feed list when you log in and provide ApiToken management similar to what you will find on NuGet.org. When creating, revoking, or regenerating an ApiToken it will email the user to notify them of the account activity. Additionally it will track usage of the Api Tokens and notify the user any time the Token is used from a new IP Address.","title":"Templates"}]}